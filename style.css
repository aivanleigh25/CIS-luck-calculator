// Pet base odds
const pets = {
  forest: { name: "Forest Guardian", egg: "Forest Egg", base: 1000000 },
  deck: { name: "Deck Master", egg: "Magic Egg", base: 1333333 }
};

// Elements
const petSelect = document.getElementById("pet");
const luckInput = document.getElementById("luck");
const notification = document.getElementById("notification");
const hatchBtn = document.getElementById("hatchBtn");

let chart;

// Load saved stats
let totalHatched = parseInt(localStorage.getItem("totalHatched")) || 0;
let mythicsHatched = parseInt(localStorage.getItem("mythicsHatched")) || 0;

// Save stats
function saveStats() {
  localStorage.setItem("totalHatched", totalHatched);
  localStorage.setItem("mythicsHatched", mythicsHatched);
}

// Hatch function
function hatchEgg() {
  totalHatched++;

  const petKey = petSelect.value;
  const pet = pets[petKey];
  const luck = parseFloat(luckInput.value) || 1;
  const odds = pet.base / luck;

  // Random roll
  const roll = Math.random() * odds;
  let hatchedMythic = false;

  if (roll < 1) {
    hatchedMythic = true;
    mythicsHatched++;
  }

  saveStats();
  updateNotification(pet, luck, odds, hatchedMythic);
  updateChart(pet.base);
}

// Update notification text
function updateNotification(pet, luck, odds, hatchedMythic) {
  const playerOdds = Math.round(pet.base / luck).toLocaleString();
  const baseOdds = pet.base.toLocaleString();

  notification.innerHTML = `
    <h2>Player Has Hatched A ${hatchedMythic ? "‚≠ê Mythic Pet!" : "Pet"}!</h2>
    <p><strong>Egg:</strong> ${pet.egg}</p>
    <p><strong>Pet:</strong> ${pet.name}</p>
    <p><strong>Evolution:</strong> Normal</p>
    <p><strong>Total Hatched Eggs:</strong> ${totalHatched.toLocaleString()}</p>
    <p><strong>Mythics Hatched:</strong> ${mythicsHatched.toLocaleString()}</p>
    <p><strong>Player's Chances:</strong> 1 / ${playerOdds}</p>
    <p><strong>Base Chances:</strong> 1 / ${baseOdds}</p>
  `;
  notification.classList.remove("hidden");
}

// Update graph
function updateChart(base) {
  const labels = [];
  const data = [];

  for (let i = 1; i <= 50; i++) {
    labels.push("x" + i);
    data.push(base / i);
  }

  if (chart) chart.destroy();

  const ctx = document.getElementById("oddsChart").getContext("2d");
  chart = new Chart(ctx, {
    type: "line",
    data: {
      labels: labels,
      datasets: [{
        label: "Hatch Odds (1 in N)",
        data: data,
        borderColor: "#00e6e6",
        backgroundColor: "rgba(0, 230, 230, 0.2)",
        fill: true,
        tension: 0.3
      }]
    },
    options: {
      responsive: true,
      plugins: { legend: { labels: { color: "#fff" } } },
      scales: {
        x: { ticks: { color: "#fff" } },
        y: { ticks: { color: "#fff" } }
      }
    }
  });
}

// Events
hatchBtn.addEventListener("click", hatchEgg);

// Init
updateNotification(pets[petSelect.value], 1, pets[petSelect.value].base, false);
updateChart(pets[petSelect.value].base);
